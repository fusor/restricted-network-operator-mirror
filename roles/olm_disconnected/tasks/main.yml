- name: Set exposed_registry
  set_fact:
    exposed_registry: "{{ local_registry }}"

- when:
  - not workaround|bool
  - local_registry == "image-registry.openshift-image-registry.svc:5000" or local_registry == "docker-registry.default.svc:5000"
  block:

  - name: Expose OpenShift internal registry
    shell: oc patch configs.imageregistry.operator.openshift.io/cluster -p='{"spec":{"defaultRoute":true}}' --type=merge
    when: local_registry == "image-registry.openshift-image-registry.svc:5000"

  - set_fact:
      registry_route_command: "oc get images.config.openshift.io -o yaml | egrep -o 'default-route.*$' | sort -u"
    when: local_registry == "image-registry.openshift-image-registry.svc:5000"

  - set_fact:
      registry_route_command: "oc get -n default route -o yaml | egrep -o 'docker-registry-default.*$' | sort -u"
    when: local_registry == "docker-registry.default.svc:5000"

  - name: Wait for registry route to be available
    shell: "{{ registry_route_command }}"
    register: registry_route
    retries: 20
    delay: 3
    until: registry_route.rc == 0

  - name: Update exposed_registry
    set_fact:
      exposed_registry: "{{ registry_route.stdout }}"

  - block:
    - name: Create namespaces for internal registry
      k8s:
        state: present
        definition: "{{ lookup('template', 'namespace.yml.j2') }}"
      with_items:
      - "{{ local_registry_ns }}"
    rescue:
    - fail:
        msg: "When this task fails it is usually an indication you are not authenticated or cannot communicate with your Openshift cluster. If necessary export the KUBECONFIG environment variable with the path to your kubeconfig. See the README for more information."

  - name: Create registry service account
    k8s:
      state: present
      definition: "{{ lookup('template', 'registry.sa.yml') }}"

  - name: Get registry service account token
    shell: oc sa -n {{ local_registry_ns }} get-token registry
    register: registry_sa_token

  - block:
    - name: Docker login to internal OpenShift registry
      docker_login:
        username: registry
        password: "{{ registry_sa_token.stdout }}"
        registry: "{{ registry_route.stdout }}"
    rescue:
    - pause:
        prompt: Add {{ registry_route.stdout }} to your insecure regisries, restart docker, then press return to try again

    - name: Docker login to internal OpenShift registry
      docker_login:
        username: registry
        password: "{{ registry_sa_token.stdout }}"
        registry: "{{ registry_route.stdout }}"

  - name: Add local_registry_ns permissions
    shell: oc policy add-role-to-group system:image-puller system:serviceaccounts:{{ deployment_namespace }} --namespace={{ local_registry_ns }}

#This is a workaround to using the internal registry as a mirror until we can work with an authenticated mirror
- when:
  - workaround|bool
  - local_registry == "image-registry.openshift-image-registry.svc:5000" or local_registry == "docker-registry.default.svc:5000"
  block:
  - name: Create namespaces for internal registry
    k8s:
      state: present
      definition: "{{ lookup('template', 'namespace.yml.j2') }}"
    with_items:
    - "{{ local_registry_ns }}"

  - name: Create passthrough TLS certs
    k8s:
      state: present
      definition: "{{ lookup('template', 'passthrough_registry_certs.yml.j2') }}"
    when: registry_passthrough_tls|bool

  - name: Create registry
    k8s:
      state: present
      definition: "{{ lookup('template', 'registry.yml.j2') }}"

  - name: Get route name
    shell: oc get route -n "{{ local_registry_ns }}" registry -o go-template={% raw -%}{{.spec.host}}{% endraw -%}
    register: registry_route

  - name: Update local registry
    set_fact:
      local_registry: "{{ registry_route.stdout }}"
      exposed_registry: "{{ registry_route.stdout }}"

- name: Disable default catalog
  shell: "oc patch OperatorHub cluster --type json -p '[{\"op\": \"add\", \"path\": \"/spec/disableAllDefaultSources\", \"value\": true}]'"
  when: olm|bool

- name: Create the deployment namespace
  k8s:
    state: present
    definition: "{{ lookup('template', 'namespace.yml.j2') }}"
  with_items:
  - "{{ deployment_namespace }}"

- name: Make temp directory
  tempfile:
    state: directory
    suffix: mig_olm_disconnected
  register: tmp_dir

- include_tasks: get_operator.yml
  loop: "{{ operators }}"
  loop_control:
    loop_var: operator
  vars:
    tmp_dir_path: "{{ tmp_dir.path }}"

- name: Initialize lists
  set_fact:
    operator_versions: []
    operator_digests: []

- name: Create catalog directory structure
  file:
    path: "{{ tmp_dir.path }}/manifests/{{ item.name }}"
    state: directory
  with_items: "{{ operators }}"

- name: Extract operator metadata
  shell: "bsdtar --strip-components 1 -xf {{ item.name }}.tar.gz -C manifests/{{ item.name }}/"
  args:
    chdir: "{{ tmp_dir.path }}"
  with_items: "{{ operators }}"

- include_tasks: fix_csvs.yml
  loop: "{{ operators }}"
  loop_control:
    loop_var: operator
  vars:
    tmp_dir_path: "{{ tmp_dir.path }}"
  when: operator.type == "dev" or operator.type == "stage"

- when: olm|bool
  block:
  - name: Clean registry items to help ensure we get the latest metadata
    shell: oc delete -n {{ deployment_namespace }} {{ item }}
    with_items:
    - buildconfigs --all
    - builds --all
    - catalogsources --all
    - secret pull-secret --ignore-not-found=true

  - name: Copy custom-registry Dockerfile into place
    copy:
      src: Dockerfile
      dest: "{{ tmp_dir.path }}/Dockerfile"

  - name: Copy pull-secret
    shell: oc get secret pull-secret -n openshift-config -o yaml --export | oc create -n openshift-migration -f -

  - name: Link secret
    shell: oc secrets -n {{ deployment_namespace }}  link builder pull-secret
    register: res
    until: res is success
    retries: 6
    delay: 10

  - name: Create custom-registry buildconfig
    shell: oc new-build --build-secret pull-secret -D - -n {{ deployment_namespace }} --name custom-registry < Dockerfile
    args:
      chdir: "{{ tmp_dir.path }}"

  - name: Wait for build to settle
    pause:
      seconds: 15

  - name: Cancel initial custom-registry build
    shell: oc cancel-build -n {{ deployment_namespace }} custom-registry-1

  - name: Start binary build
    shell: oc start-build -n {{ deployment_namespace }} custom-registry --from-dir . --follow=true
    args:
      chdir: "{{ tmp_dir.path }}"

  - name: Create custom registry
    k8s:
      state: present
      definition: "{{ lookup('template', 'catalog.yml.j2') }}"

- name: Initialize mirrors
  set_fact:
    mirrors: []

- include_tasks: mirror_images.yml
  loop: "{{ operators }}"
  loop_control:
    loop_var: operator
  vars:
    tmp_dir_path: "{{ tmp_dir.path }}"

- name: Create image content source policies
  k8s:
    state: present
    definition: "{{ lookup('template', 'image-content-source-policy.yml.j2') }}"
  when: icsp|bool

# Remove when internal authenticated registry works again
- name: Add insecure registry
  shell: |
         oc patch images.config.openshift.io/cluster -p='{"spec":{"registrySources":{"insecureRegistries":["{{ exposed_registry }}"]}}}' --type=merge
  when:
  - workaround is defined
  - icsp|bool

- name: Run custom post commands
  shell: "{{ item }}"
  args:
    chdir: "{{ tmp_dir.path }}"
    warn: false
  with_items: "{{ post_commands }}"
  when: post_commands is defined

- name: Message
  debug:
    msg:
    - "Note an ImageContentSourcePolicy was just created. This will cause nodes to start rebooting and cause some cluster instability while completing. For best results be patient and wait for this process to finish (it can take more than 30 minutes for a 12 node cluster). Until a check is implemented here you can watch progress with:"
    - "watch 'oc describe node -l node-role.kubernetes.io/worker= | grep -e Name: -e rendered'"
  when: icsp|bool

- name: Verify worker configurations are consistent
  block:
    
    - name: Waiting for machine configuration worker pool to start updating
      k8s_facts:
        kind: MachineConfigPool
        name: worker
      register: machine_config
      retries: 30
      delay: 20
      until: |
        machine_config.get('resources', []) | length == 1 and
        machine_config.resources[0].status.get('conditions', {}) | list | selectattr( "type", "equalto", "Updating") | selectattr( "status", "equalto", "True") | list | length > 0

    - name: Waiting for machine configuration worker pool to finish updating
      k8s_facts:
        kind: MachineConfigPool
        name: worker
      register: machine_config
      retries: 120
      delay: 60
      until: |
        machine_config.get('resources', []) | length == 1 and
        machine_config.resources[0].status.get('conditions', {}) | list | selectattr( "type", "equalto", "Updating") | selectattr( "status", "equalto", "False") | list | length > 0
    
  when: validate_node_config|bool

- name: Message
  debug:
    msg:
    - The operator.yml in this directory should work with your mirrored images.
  when: not olm|bool

